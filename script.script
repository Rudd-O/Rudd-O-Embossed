Window.SetBackgroundTopColor (0.50, 0.50, 0.50);
Window.SetBackgroundBottomColor (0.75, 0.75, 0.75);

logo.image = Image("logo.png");
logo.sprite = Sprite(logo.image);
logo.sprite.SetX (Window.GetWidth()  / 2 - logo.image.GetWidth()  / 2);
logo.sprite.SetY (Window.GetHeight() / 2 - logo.image.GetHeight() / 2);
logo.sprite.SetZ (10000);
logo.sprite.SetOpacity(0);

progress = 0;
progress_box.image = Image("throbber-0" + progress + ".png");
progress_box.sprite = Sprite();
progress_box.x = Window.GetWidth() / 2 - progress_box.image.GetWidth()  / 2;
progress_box.y = Window.GetHeight() * 0.75 - progress_box.image.GetHeight() / 2;
progress_box.sprite.SetPosition(progress_box.x, progress_box.y, 0);
progress_box.sprite.SetImage(progress_box.image);
progress_box.sprite.SetOpacity(0);

fun progress_callback (time, progress)
{

    multprogress = progress * 288;
    multprogress = Math.Int(multprogress) % 12;
    new_progress_box.image = Image("throbber-0" + multprogress + ".png");
    progress_box.sprite.SetImage(new_progress_box.image);
    progress_box.sprite.SetOpacity(1);

    if ( Plymouth.GetMode () == "boot") {
        logo.sprite.SetOpacity(Math.Clamp( progress * 6 ,0,1));
    }
    else if (Plymouth.GetMode () == "resume" ) {
	logo.sprite.SetOpacity(Math.Clamp( time / 1 ,0,1));
    }
    else if (Plymouth.GetMode () == "suspend" ) {
        logo.sprite.SetOpacity(Math.Clamp(1 - ( time / 3 ),0,1));
    }
    else if (Plymouth.GetMode () == "shutdown") {
        logo.sprite.SetOpacity(Math.Clamp(1 - ( time / 7 ),0,1));
        if ( 1 - ( time / 7 ) < 0) {
           quit_callback();
        }
    }
    else {
        logo.sprite.SetOpacity(1);
    }

}
Plymouth.SetBootProgressFunction (progress_callback);

/*                                     Message                                   */

message_box.image = Image("messagebox.png");
message_box.x = Window.GetWidth()  / 2 - message_box.image.GetWidth ()/2;
message_box.y = Window.GetHeight() - message_box.image.GetHeight ();
message_box.sprite = Sprite(message_box.image);
message_box.sprite.SetOpacity(0);
message_box.sprite.SetPosition(message_box.x, message_box.y, 10);

message_sprite = Sprite();
message_sprite.SetPosition(message_box.x + 19, message_box.y + 20, 11);
message_sprite.SetOpacity(0);

fun display_message (text)
{
  message_box.sprite.SetOpacity(1);
  my_image = Image.Text(text, 0, 0, 0);
  message_sprite.SetImage(my_image);
  message_sprite.SetPosition(Window.GetWidth() / 2 - my_image.GetWidth() / 2, message_box.y + 20, 11);
  message_sprite.SetOpacity(0.75);
}

fun hide_message (text)
{
    message_sprite.SetOpacity(0);
    message_box.sprite.SetOpacity(0);
}
Plymouth.SetHideMessageFunction(hide_message);


fun donothing() {
   doingnothing = 1;
}
fun quit_callback ()
{
  hide_message();
  progress_box.sprite.SetOpacity (0);
  if (Plymouth.GetMode() == "boot") { 
    logo.sprite.SetOpacity(1);
  }
  else if (Plymouth.GetMode() == "shutdown") {
    logo.sprite.SetOpacity(0);
  }
  Plymouth.SetUpdateStatusFunction(donothing);
  Plymouth.SetBootProgressFunction(donothing);
}

Plymouth.SetQuitFunction(quit_callback);


fun rootmounted_callback ()
{
  display_message("Root file system mounted");
}
Plymouth.SetRootMountedFunction(rootmounted_callback);


fun message_callback (text)
{
  display_message("Message: " + text);
}
Plymouth.SetMessageFunction(message_callback);


fun updatestatus_callback (text)
{

    if ( Plymouth.GetMode () == "boot" ) {
        display_message("Loading " + text);
        if (text == "prefdm.service") {
           quit_callback();
           display_message("Starting display manager");
        }
    }
    else if ( Plymouth.GetMode () == "shutdown" ) {
        display_message("Shutting down " + text);
    }
    else if ( Plymouth.GetMode () == "suspend" ) {
        display_message("Suspending " + text);
    }
    else if ( Plymouth.GetMode () == "resume" ) {
        display_message("Resuming " + text);
    }
    else {
        display_message("Status update: " + text);
    }

}
Plymouth.SetUpdateStatusFunction(updatestatus_callback);

/*                                   Dialogue                                  */

status = "normal";

fun dialog_setup()
  {
    local.box;
    local.lock;
    local.entry;
    local.entrytext;

    box.image = Image("box.png");
    lock.image = Image("lock.png");
    entry.image = Image("entry.png");
    
    box.sprite = Sprite(box.image);
    box.x = Window.GetWidth()  / 2 - box.image.GetWidth ()/2;
    box.y = 3 * Window.GetHeight() / 4 - box.image.GetHeight()/2;
    box.z = 10000;
    box.sprite.SetPosition(box.x, box.y, box.z);
    
    lock.sprite = Sprite(lock.image);
    lock.x = box.x + box.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth()) / 2;
    lock.y = box.y + box.image.GetHeight()/2 - lock.image.GetHeight()/2;
    lock.z = box.z + 1;
    lock.sprite.SetPosition(lock.x, lock.y, lock.z);
    
    entry.sprite = Sprite(entry.image);
    entry.x = lock.x + lock.image.GetWidth();
    entry.y = box.y + box.image.GetHeight()/2 - entry.image.GetHeight()/2;
    entry.z = box.z + 1;
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);
    
    local.bullshitimage = Image.Text("entry",0.5,0.5,0.5);
    entrytext.sprite = Sprite(bullshitimage);
    entrytext.x = entry.x + 7;
    entrytext.y = entry.y + 6;
    entrytext.z = entry.z + 1;
    entrytext.sprite.SetPosition(entrytext.x, entrytext.y, entrytext.z);
    entrytext.sprite.SetOpacity (0);
    
    global.dialog.box = box;
    global.dialog.lock = lock;
    global.dialog.entry = entry;
    global.dialog.entrytext = entrytext;
    global.dialog.bullet_image = Image("bullet.png");
    dialog_opacity (1);
  }
    
fun dialog_opacity(opacity)
  {
    dialog.box.sprite.SetOpacity (opacity);
    dialog.lock.sprite.SetOpacity (opacity);
    dialog.entry.sprite.SetOpacity (opacity);
    for (index = 0; dialog.bullet[index]; index++)
      {
        dialog.bullet[index].sprite.SetOpacity(opacity);
      }
    if (global.status == "normal")
        dialog.entrytext.sprite.SetOpacity(opacity);
  }

fun display_normal_callback ()
  {
    if (global.dialog)
      dialog_opacity(0);
    hide_message("");
  }

fun display_question_callback (prompt, text) {

    display_message(prompt);

    global.status = "normal";
    if (!global.dialog)
      dialog_setup();
    else
      dialog_opacity(1);

    global.dialog.lock.image = Image("keyboard.png");
    global.dialog.lock.sprite.SetImage(global.dialog.lock.image);
    
    local.my_image = Image.Text(text, 0.1, 0.1, 0.1);
    global.dialog.entrytext.sprite.SetImage(local.my_image);
    global.dialog.entrytext.sprite.SetOpacity(1);

}

fun display_password_callback (prompt, bullets)
  {
    display_message(prompt);
    global.status = "password";
    if (!global.dialog)
    dialog_setup();
    else
    dialog_opacity(1);

    global.dialog.lock.image = Image("lock.png");
    global.dialog.lock.sprite.SetImage(global.dialog.lock.image);
    
    for (index = 0; dialog.bullet[index] || index < bullets; index++)
      {
        if (!dialog.bullet[index])
          {
            dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
            dialog.bullet[index].x = dialog.entry.x + 6 + index * dialog.bullet_image.GetWidth();
            dialog.bullet[index].y = dialog.entry.y + 2 + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
            dialog.bullet[index].z = dialog.entry.z + 1;
            dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
          }
        if (index < bullets)
          dialog.bullet[index].sprite.SetOpacity(1);
        else
          dialog.bullet[index].sprite.SetOpacity(0);
      }
  }

Plymouth.SetDisplayQuestionFunction(display_question_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);
Plymouth.SetDisplayNormalFunction(display_normal_callback);


